
/* Drop Views */

DROP VIEW LOAN_VIEW;



/* Drop Triggers */

DROP TRIGGER INSERT_STATUS;
DROP TRIGGER UPDATE_STATUS;



/* Drop Tables */

DROP TABLE LOAN_HISTORY;
DROP TABLE FRIEND;
DROP TABLE ITEM;




/* Create Tables */

CREATE TABLE FRIEND
(
	-- ID DO AMIGO
	ID_FRIENDS INTEGER NOT NULL,
	-- NOME DO AMIGO
	NA_NAME VARCHAR(255),
	-- TELEFONE DO AMIGO
	NA_NUMBER VARCHAR(50),
	PRIMARY KEY (ID_FRIENDS)
);


CREATE TABLE ITEM
(
	-- ID DO ITEM
	ID_ITEM INTEGER NOT NULL,
	-- NOME DO ITEM
	NA_TITLE VARCHAR(100),
	-- DESCRIÇÃO DO ITEM
	NA_DESC TEXT,
	-- STATUS DO ITEM
	-- 0 SE ESTIVER DISPONÍVEL
	-- 1 SE ESTIVER EMPRESTADO
	FL_STATUS INTEGER NOT NULL,
	PRIMARY KEY (ID_ITEM)
);


CREATE TABLE LOAN_HISTORY
(
	-- ID DO EMPRESTIMO
	ID_HISTORY INTEGER NOT NULL,
	-- ID DO AMIGO
	ID_FRIENDS INTEGER NOT NULL,
	-- ID DO ITEM
	ID_ITEM INTEGER NOT NULL,
	-- DATA DO EVENTO DE EMPRESTIMO
	DT_DATE VARCHAR(8) NOT NULL,
	-- STATUS DO ITEM
	-- 0 SE ESTIVER DISPONÍVEL
	-- 1 SE ESTIVER EMPRESTADO
	FL_STATUS INTEGER NOT NULL,
	PRIMARY KEY (ID_HISTORY)
);



/* Create Foreign Keys */

ALTER TABLE LOAN_HISTORY
	ADD FOREIGN KEY (ID_FRIENDS)
	REFERENCES FRIEND (ID_FRIENDS)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE LOAN_HISTORY
	ADD FOREIGN KEY (ID_ITEM)
	REFERENCES ITEM (ID_ITEM)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Triggers */

CREATE TRIGGER INSERT_STATUS CREATE TRIGGER INSERT_STATUS AFTER INSERT ON LOAN_HISTORY
BEGIN
          UPDATE ITEM SET FG_STATUS = NEW.FG_STATUS WHERE _ID = NEW.ID_ITEM;
END;;
CREATE TRIGGER UPDATE_STATUS CREATE TRIGGER UPDATE_STATUS AFTER UPDATE ON LOAN_HISTORY
BEGIN
           UPDATE ITEM SET FG_STATUS = NEW.FG_STATUS WHERE _ID = NEW.ID_ITEM;
END;;



/* Create Views */

CREATE VIEW LOAN_VIEW AS CREATE VIEW IF NOT EXISTS LOAN_VIEW AS
SELECT L._ID AS _ID, F.NA_NAME AS NA_NAME, I.NA_TITLE AS NA_TITLE, L.FL_TYPE AS FL_TYPE, L.DT_DATE AS DT_DATE
FROM LOAN_HISTORY L, ITEM I, FRIEND F
WHERE L._ID = F._ID
AND L._ID = I._ID;



